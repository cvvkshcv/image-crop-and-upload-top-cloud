{"version":3,"sources":["HomePage/pages/HomePage.js","Utils/image-preview.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","useState","files","setFiles","fileName","setFileName","isUploading","setIsUploading","downloadUrls","setDownloadUrls","hasError","setError","previewImg","setPrevImg","imageRef","useRef","scrollToPreview","unit","x","y","aspect","width","height","recommendedWidth","recommendedHeight","cropType","cropConfig","setCropConfig","currentCropStep","setCurrentCropStep","onDrop","useCallback","length","image","Image","addEventListener","forEach","file","Object","assign","preview","URL","createObjectURL","src","useDropzone","accept","multiple","getRootProps","getInputProps","isDragActive","moveStep","direction","handleChange","crop","pixelCrop","newState","map","config","i","cropNavigation","className","disabled","onClick","previewImgPromises","canvas","document","createElement","getContext","drawImage","Promise","resolve","reject","toBlob","blob","name","getCroppedImg","current","all","then","prev","img","imgBlob","cnf","altTitle","key","alt","title","window","scrollTo","offsetTop","catch","err","console","log","thumbs","ref","style","display","onChange","type","e","target","value","placeholder","storageRef","firebase","uploadPromises","child","Math","random","toString","put","uploadTaskSnapshot","getDownloadURL","data","url","href","download","App","path","exact","to","Boolean","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.032f121a.chunk.js","sourcesContent":["import React, { useCallback, useState, useRef } from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport ReactCrop from 'react-image-crop';\r\nimport { getCroppedImg } from '../../Utils/image-preview';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport * as firebase from 'firebase';\r\nimport './HomePage.css';\r\n\r\nconst HomePage = () => {\r\n\r\n    const [files, setFiles] = useState([]);\r\n    const [fileName, setFileName] = useState('');\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [downloadUrls, setDownloadUrls] = useState([]);\r\n    const [hasError, setError] = useState('');\r\n    const [previewImg, setPrevImg] = useState([]);\r\n    const imageRef = useRef(null);\r\n    const scrollToPreview = useRef(null);\r\n    const [cropConfig, setCropConfig] = useState([\r\n      {\r\n        unit: 'px',\r\n        x: 0,\r\n        y: 0,\r\n        aspect: 1.68,\r\n        width: 755,\r\n        height: 450,\r\n        recommendedWidth: 755,\r\n        recommendedHeight: 450,\r\n        cropType: 'Horizontal'\r\n      },\r\n      {\r\n        unit: 'px',\r\n        x: 0,\r\n        y: 0,\r\n        width: 365,\r\n        height: 450,\r\n        recommendedWidth: 365,\r\n        recommendedHeight: 450,\r\n        aspect: 0.81/1,\r\n        cropType: 'Vertical'\r\n      },\r\n      {\r\n        unit: 'px',\r\n        x: 0,\r\n        y: 0,\r\n        width: 365,\r\n        height: 212,\r\n        recommendedWidth: 365,\r\n        recommendedHeight: 212,\r\n        aspect: 1.72,\r\n        cropType: 'Horizontal small'\r\n      },\r\n      {\r\n        unit: 'px',\r\n        x: 0,\r\n        y: 0,\r\n        aspect: 1/1,\r\n        width: 380,\r\n        height: 380,\r\n        recommendedWidth: 380,\r\n        recommendedHeight: 380,\r\n        cropType: 'Gallery'\r\n      }\r\n    ]);\r\n    const [currentCropStep, setCurrentCropStep] = useState(0);\r\n\r\n\r\n    const onDrop = useCallback(files => {\r\n      setDownloadUrls([]);\r\n      if (files.length) {\r\n        const RES_LIM = 1024;\r\n        const image = new Image();\r\n        image.addEventListener('load', () => {\r\n            if (image.width === RES_LIM & image.height === RES_LIM) {\r\n              files.forEach(file => Object.assign(file, { preview: URL.createObjectURL(file) }));\r\n              setFiles(files);\r\n              setError('');\r\n            } else {\r\n              setFiles([]);\r\n              setError('File resolution should be 1024 x 1024');\r\n            }\r\n        });\r\n        image.src = URL.createObjectURL(files[0])\r\n      } else {\r\n        setFiles([]);\r\n        setError('Only image files allowed');\r\n      }\r\n    }, []);\r\n\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\r\n      accept: 'image/*',\r\n      multiple: false,\r\n      onDrop\r\n    });\r\n\r\n    const moveStep = (direction) => {\r\n      if (direction === 'next' && currentCropStep < cropConfig.length - 1) {\r\n        setCurrentCropStep(currentCropStep + 1);\r\n      } else if (direction === 'prev' && currentCropStep > 0) {\r\n        setCurrentCropStep(currentCropStep - 1);\r\n      }\r\n    }\r\n\r\n    const preview = () => {\r\n      const previewImgPromises = cropConfig.map((config, i) => {\r\n        return getCroppedImg(imageRef.current, config, `config-${i}`);\r\n      });\r\n      Promise.all(previewImgPromises)\r\n        .then(prev => {\r\n          const img = prev.map((imgBlob, i) => {\r\n            const cnf = cropConfig[i];\r\n            const altTitle = `preview ${i + 1} | ${cnf.height}x${cnf.width}`;\r\n            return {\r\n              img: <img key={i} src={URL.createObjectURL(imgBlob)} height={cnf.height} width={cnf.width} alt={altTitle} title={altTitle} />,\r\n              blob: imgBlob\r\n            }\r\n          });\r\n          setPrevImg(img);\r\n          window.scrollTo(0, scrollToPreview.current.offsetTop)\r\n        }).catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    const handleChange = (crop, pixelCrop) => {\r\n      const newState = cropConfig.map((config, i) => (i === currentCropStep) ? crop : config)\r\n      setCropConfig(newState);\r\n      setPrevImg([]);\r\n    }\r\n\r\n    const cropNavigation = (\r\n      <div className=\"d-flex space-between crop-navigation\">\r\n        <button disabled={currentCropStep === 0} onClick={ () => moveStep('prev') }>Prev</button>\r\n        <div className=\"crop-navigation-step\">\r\n          Step : { currentCropStep + 1 } / {cropConfig.length} |\r\n          {' '}\r\n          {cropConfig[currentCropStep].cropType} | Recommended resolution : {cropConfig[currentCropStep].recommendedWidth} x {cropConfig[currentCropStep].recommendedHeight}\r\n          {' '}\r\n          <button onClick={preview}>Preview all</button>\r\n        </div>\r\n        <button disabled={currentCropStep === cropConfig.length - 1} onClick={ () => moveStep('next') }>Next</button>\r\n      </div>\r\n    );\r\n\r\n    const thumbs = files.map(file => (\r\n      <div className=\"thumb\" key={file.name}>\r\n        {cropNavigation}\r\n        <img src={file.preview} ref={imageRef} style={{display: 'none'}} />\r\n        <ReactCrop src={file.preview} crop={cropConfig[currentCropStep]} onChange={handleChange} />\r\n        {cropNavigation}\r\n      </div>\r\n    ));\r\n\r\n    const handleUpload = () => {\r\n      setIsUploading(true);\r\n      const storageRef = firebase.storage().ref();\r\n      const uploadPromises = previewImg.map((prev, i) => {\r\n        return storageRef.child(`/${fileName}-${Math.random().toString()}-${cropConfig[i].cropType}`).put(prev.blob).then(uploadTaskSnapshot => {\r\n          return uploadTaskSnapshot.ref.getDownloadURL();\r\n        });\r\n      });\r\n      Promise.all(uploadPromises).then(data => {\r\n        setDownloadUrls([...data]);\r\n        setPrevImg([]);\r\n        setIsUploading(false);\r\n      }).catch(err => console.log(err));\r\n    };\r\n  \r\n    const handleFileName = (e) => {\r\n      setFileName(e.target.value);\r\n    };\r\n\r\n    return (\r\n      <main className=\"main-container\">\r\n        <div {...getRootProps()}>\r\n          <input {...getInputProps()} />\r\n          {\r\n            isDragActive ?\r\n                <p>Drop the files here ...</p> :\r\n                <div className=\"drag-and-drop-section\">\r\n                    <p>Drop your image here or select a file</p>\r\n                </div>\r\n          }\r\n        </div>\r\n        { (files.length) ? thumbs : null }\r\n        <p className=\"text-center text-danger\">{ hasError }</p>\r\n        {\r\n          (previewImg.length) ? \r\n          <div className=\"preview-wrapper\">\r\n            <div className=\"preview-controls\">\r\n              <h3 ref={scrollToPreview}>Image Preview:</h3> {' '}\r\n              <div className=\"upload-section\">\r\n                <input type=\"text\" onChange={handleFileName} placeholder=\"File name to save\" className=\"form-control\" />\r\n                <button className=\"upload-btn\" onClick={handleUpload}>Upload to cloud!</button>\r\n              </div>\r\n            </div>\r\n            <div className=\"preview-section\">\r\n              {previewImg.map(prev => prev.img)}\r\n            </div>\r\n          </div> : null\r\n        }\r\n        { (downloadUrls.length) ? \r\n            <>\r\n              <h4 className=\"text-center\">Click links to download</h4>\r\n              <ul className=\"text-center download-urls\">\r\n                { \r\n                  downloadUrls.map((url, i) => (<li key={i}><a href={url} target=\"_blank\" download>{cropConfig[i].cropType} image</a></li>))\r\n                }\r\n              </ul>\r\n            </>\r\n          : null\r\n        }\r\n        {\r\n          isUploading && <div className=\"loading\">\r\n            Uploading...\r\n          </div>\r\n        }\r\n      </main>\r\n  );\r\n};\r\n\r\nexport default HomePage;","export const getCroppedImg = (image, pixelCrop, fileName) => {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = pixelCrop.width;\r\n    canvas.height = pixelCrop.height;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    ctx.drawImage(\r\n        image,\r\n        pixelCrop.x,\r\n        pixelCrop.y,\r\n        pixelCrop.width,\r\n        pixelCrop.height,\r\n        0,\r\n        0,\r\n        pixelCrop.width,\r\n        pixelCrop.height\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n        canvas.toBlob(blob => {\r\n            if (blob) {\r\n                blob.name = fileName;\r\n                resolve(blob);\r\n            }\r\n        }, 'image/jpeg');\r\n    });\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch} from 'react-router-dom';\nimport './App.css';\nimport HomePage from './HomePage/pages/HomePage';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact><HomePage /></Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAkUCtDL6nGSM-FmW2PN9cAMkre1do41BM\",\n  authDomain: \"image-upload-f37d4.firebaseapp.com\",\n  databaseURL: \"https://image-upload-f37d4.firebaseio.com\",\n  projectId: \"image-upload-f37d4\",\n  storageBucket: \"image-upload-f37d4.appspot.com\",\n  messagingSenderId: \"919572141671\",\n  appId: \"1:919572141671:web:20fdecf5c4fdac5f54a6c2\",\n  measurementId: \"G-BCC1BRGW6W\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}